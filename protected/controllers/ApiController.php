<?php


class ApiController extends QueriesController
{


    const API_KEY_NAME = "pdmkey";
    const INCOME_EXPENSES_ACTION_TAG = "ie";
    const USER_CREDENTIALS_ACTION_TAG = "uc";
    const RECENT_TRANSACTIONS_ACTION_TAG = "rt";
    const EXPENSES_BY_CATEGORY_ACTION_TAG = "ec";

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function getApiUser(){
        $key = isset($_GET[self::API_KEY_NAME]) ? $_GET[self::API_KEY_NAME] : null;
        if($key != null ){
            $setting = Settings::model()->findByAttributes(
                ['setting_name'=>'api_key','setting_value'=>$key]);
            if($setting !== null ){
                $userId = $setting->user_id;
                $user = Users::model()->findByPk($userId);
                return $user;
            }
        }

        return null;
    }

    public function beforeAction($action)
    {
        $page = Yii::app()->controller->action->id;
        $path = Yii::app()->controller->id;
        $user = $this->getApiUser();
        if($path == "api" && $page=="post"
          && isset($_GET["action"])
          && $_GET["action"]== self::USER_CREDENTIALS_ACTION_TAG){
                  return parent::beforeAction($action); // TODO: Change the autogenerated stub
        }else if($user){
            $userid = new ApiUserIdentity($user->username,$user->email);
            $userid->authenticate();
            Yii::app()->user->login($userid,0);
            Yii::app()->session['userid'] = Yii::app()->user->userid;
            return parent::beforeAction($action); // TODO: Change the autogenerated stub
        }else{
            Utils::jsonResponse('bad','Authentication failed','');
        }
    }

    public function actionGet(){
        $action = $_GET['action'];
        if($action == self::INCOME_EXPENSES_ACTION_TAG){
            $this->appGetIEThisMonth();
        }else if($action ==  self::RECENT_TRANSACTIONS_ACTION_TAG){
           $this->getRecentTransactions();
        }else if($action == self::EXPENSES_BY_CATEGORY_ACTION_TAG){
            $this->getExpensesByCategory();
        }else{
            Utils::jsonResponse('bad','Bad Request Not found');
        }
    }


    public function actionPost(){
        $action = $_GET['action'];
        if($action == 'create_transaction'){
            $this->appCreateTransaction();
        }else if($action == self::USER_CREDENTIALS_ACTION_TAG){
            $this->getCredentials();
        }else{
            Utils::jsonResponse('bad','Bad Request Not found');
        }
    }

    public function appGetIEThisMonth(){
        $data = [
            'income' => $this->getIncomeThisMonth(),
            'expenses' => $this->getExpenses(),
            'worth' => $this->getNetWorth(),
            'savings' => $this->getSavings()
        ];
        Utils::jsonResponse('good','good',$data);
    }

    public function appGetExpenseThisMonth(){

    }

    public function appGetIncomeThisMonth(){

    }

    public function appCreateTransaction(){
        $model = new Transaction();
        $model->setScenario('save-trans');
        $model->trans_date = Utils::getPost('transDate');
        $model->assignAmount(Utils::getPost('amount'));
        $model->amount = Utils::getPost('amount');
        $model->category = Utils::getPost('category');
        $model->description = Utils::getPost('description');
        $model->account_id = Utils::getPost('account');
        $model->type = Utils::getPost('transType');
        $model->memo = Utils::getPost('memo');
        $frequency = Utils::getPost('frequency');
        if($model->save()){
            if(!empty($frequency)){
                $this->createRepeatTransaction($model, $frequency);
            }
            Utils::jsonResponse(Utils::STATUS_GOOD,'Transaction successfully saved');
        }else{
            Utils::logger(CHtml::errorSummary($model));
            Utils::jsonResponse(Utils::STATUS_BAD,"Error occurred");
        }
    }

    public function createRepeatTransaction($transaction, $freq){
        $frequencies = ["year","month","week","day"];
        $model = RepeatTransaction::model()->findByAttributes(['transaction_id'=>$transaction->id]);
        if(!empty($freq) && in_array($freq, $frequencies)){
            if($model == null ){
                $model = new RepeatTransaction();
                $model->created_date = $transaction->trans_date;
                $model->transaction_id = $transaction->id;
            }
            if($model->isNewRecord){
                $model->frequency = $freq;
                $model->setUpComingDateFromFrequency();
                $model->save();
            }else{
                if($model->frequency != $freq){
                    $model->frequency = $freq;
                }
                $model->update();
            }
        }
    }

    public function getCredentials(){
        $email = Utils::getPost("email");
        $password = Utils::getPost("password");
        $record = Users::model()->findByAttributes(array('email'=>$email));
        if(empty($email) || empty($password)){
            Utils::jsonResponse('bad','No user or email found');
        }else if($record == null){
            Utils::jsonResponse('bad','No api key is setup for this user');
        }else{
            $apiKey = Utils::getUserSetting('api_key', $record->id,"");
            $ph=new PasswordHash(Yii::app()->params['phpass']['iteration_count_log2'],
                Yii::app()->params['phpass']['portable_hashes']);
            if(!$ph->CheckPassword($password, $record->password)){
                Utils::jsonResponse('bad','User name or password incorrect');
            }else if(empty($apiKey)){
                Utils::jsonResponse('bad','No api key is setup for this user');
            }else{
                Utils::jsonResponse('good','good',
                    [
                        'apiKey'=>$apiKey,
                        'username'=>$record->username,
                        'categories' => $this->getUserCategories(),
                        'accounts' => $this->getUserAccounts()
                    ]);
            }
        }
    }

    private function getUserCategories(){
        $cats = Categories::model()->getAllCategories();
        $catsData = [];
        foreach ($cats as $cat){
            $catsData[] = $cat->name;
        }
        return $catsData;
    }

    private function getUserAccounts(){
        $accounts = Accounts::model()->getUserAccounts();
        $accountsData = [];
        foreach ($accounts as $account){
            $accountsData[] = [
                'id' => $account->id,
                'name' => $account->name
            ];
        }
        return $accountsData;
    }

    public function getRecentTransactions(){
        $criteria = new CDbCriteria();
        $criteria->addCondition('type="expense" OR type="income"');
        $criteria->addCondition(Utils::queryUserAccounts());
        $criteria->limit = 50;
        $criteria->order = "trans_date desc";
        $transactions = Transaction::model()->findAll($criteria);
        $trans_array = [];
        foreach($transactions as $transaction){
          $data = $transaction->getAsJsonObject();
          $data["transDate"] = date("D, M d Y", strtotime($transaction->trans_date));
          $data["amount"] = Utils::formatMoney($transaction->amount);
          $data["category"] = ucfirst($transaction->category);
          $trans_array[] = $data;
        }
        if(count($transactions) > 0){
          Utils::jsonResponse('good','good',[
            'transactions' => $trans_array,
            'limit' => 50
         ]);
        }else{
          Utils::jsonResponse('bad','No transcations found','');
        }
    }

    public function getExpensesByCategory(){
        $settings['type'] = "month";
        $settings["month"] = Utils::getNumMonth();
        $settings["year"] = Utils::getYear();
        $data = Queries::getAllExpensesByYear($this->getReportFilter($settings));
        $labels = $this->convert_data_to_pie_dataset('category', $data);
        $dataset = $this->convert_data_to_pie_dataset('total',$data);
        $data = [
            'labels' => $labels,
            'dataset' => $dataset,
            'colors' => $this->getHexColors(count($labels)),
            'percentages' => $this->convert_data_to_pie_dataset('percentage',$data)
        ];
        Utils::jsonResponse('good','good',$data);
    }


}
